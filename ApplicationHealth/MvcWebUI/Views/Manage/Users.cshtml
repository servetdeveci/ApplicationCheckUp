@model ApplicationHealth.MvcWebUI.AccountModel.UsersModel
@{
    ViewData["Title"] = "Kullanıcılar";
    Layout = "~/Views/Shared/_LayoutAW.cshtml";
}


@Html.AntiForgeryToken()
<link href="/lib/bootstrap-sweetalert/sweetalert.css" rel="stylesheet" />
<link href="/lib/DataTables/datatables.css" rel="stylesheet" />
<link href="/assets/node_modules/bootstrap-select/bootstrap-select.min.css" rel="stylesheet" />


<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-4 col-md-3 col-lg-3 mb-1" id="userFirmDiv">
                        <select id="userFirm" name="userFirm" class="form-control selectpicker" data-size="5" data-live-search="true">
                            <option value="0">Veriler Yükleniyor</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="card">
    <div class="card-body">
        <h5 class="text-uppercase text-info font-weight-bold"><i class="fa fa-user"></i>  Kullanıcı Düzenleme</h5>


        <table class="table table-striped table-hover" width="100%" id="users">
            <thead>
                <tr class="bg-secondary text-white">
                    <th class="all">Gerçek Adı</th>
                    <th class="min-phone-l">Kullanıcı Adı</th>
                    <th class="min-tablet">E-Posta</th>
                    <th class="desktop">Cep Telefonu</th>
                    <th class="desktop">Telefonu</th>
                    <th class="min-tablet">Geçerlilik Tarihi</th>
                    <th class="min-tablet">İşlemler</th>

                </tr>
            </thead>

            <tbody> @*Ajax İle Doldurulacak*@ </tbody>
        </table>

    </div>
</div>

@section Scripts{
    <script src="/lib/DataTables/datatables.min.js"></script>
    <script src="/lib/bootstrap-sweetalert/sweetalert.min.js"></script>
    <script src="/assets/node_modules/moment/moment.js"></script>
    <script src="/assets/node_modules/bootstrap-select/bootstrap-select.min.js"></script>

    <script>
    var dataTableObj = $('#users').DataTable({
      caseInsensitive: true,
      order: [[1, 'asc']],
      autoWidth: true,
      scrollX: true,
      language: { url: "/lib/DataTables/Turkish.json" },
      columns: [

         {
            "data": "Name",
            "render": function (data, type, JsonResultRow, meta) {
               var content = '<a title="Düzenle"  href="/Manage/EditUser?Id=' + JsonResultRow.Id + '">' + JsonResultRow.Name + '</a>';
               return content;
            }
         },
         {
            "data": "UserName",
            "render": function (data, type, JsonResultRow, meta) {
               return '<a title="Düzenle"  href="/Manage/EditUser?Id=' + JsonResultRow.Id + '">' + JsonResultRow.UserName + '</a>';
            }
         },


         { "data": "Email" },
         { "data": "MobilePhone" },
         { "data": "PhoneNumber" },
         {
             "data": "ExpiredDate",
             "render": function (data, type, JsonResultRow, meta) {
                 return moment(data).format('DD-MM-YYYY HH:mm:ss');
             }
         },
         {
            "data": "IsActive",
             "render": function (data, type, JsonResultRow, meta) {
                 if (JsonResultRow.CanDeleted === false) { return ""; }
                       var content = '<a title="Sil" data-id="' + JsonResultRow.Id + '" class="btn btn-outline-danger btn-xs deleteUserClass"><i class="fa fa-trash"></i> Sil</a>';

                       if (JsonResultRow.IsActive === true) {
                          return content + ' <a  title="Pasif Yap" data-state="false" data-id="' + JsonResultRow.Id + '" class="btn btn-xs btn-outline-success pasiveUserClass"><span class="fa fa-check"> </span> <span class="hidden-lg hidden-md hidden-sm">Pasif Yap </span> </a>';
                       }
                       else {
                          return content + ' <a title="Aktif Yap"  data-state="true" data-id="' + JsonResultRow.Id + '" class="btn btn-xs  btn-outline-warning pasiveUserClass"><span class="fa fa-times"></span>  <span class="hidden-lg hidden-md hidden-sm">Aktif Yap </span> </a>';
                       }
                }
             }
      ],
      dom: 'Blfrtip',
      buttons: [
         {
            extend: 'print', text: '<i class="fa fa-print"></i> Yazdır', className: 'btn  btn-outline-secondary btn-sm'
         },
         {
            extend: 'pdf', title: 'PDF Raporu ', text: '<i class="fa fa-file-pdf"></i> PDF', className: 'btn  btn-outline-secondary btn-sm '
         },
         {
            title: 'Yeni Kullanıcı',
            text: '<i class="fa fa-plus"></i> Yeni Kullanıcı',
            className: 'btn btn-outline-secondary btn-sm',
            action: function (e, dt, node, config) {
               window.location = "/Manage/register";
            }
         }
      ],
   });
    var filtersData = {
        firmId: '@Model.FirmId'
    };

    GetFirms();

    GetUsersForSelectedFirm(filtersData.firmId);


   $(document).on("click", ".deleteUserClass", function () {

      var $silinecek = $(this).parent().parent();
      var userId = $(this).data("id");
      swal({
         title: "Silmek istediğinize emin misiniz?",
         text: "Kullanıcı ekstra yetkileri ile birlikte silinecektir.",
         type: "warning",
         showCancelButton: true,
         confirmButtonClass: "btn-danger",
         confirmButtonText: "Evet",
         cancelButtonText: "İptal",
         closeOnConfirm: false,
         closeOnCancel: false
      },

         function (isConfirm) {
            if (isConfirm) {

               $.ajax({
                  type: "POST",
                  url: "/Manage/UsersDeleteUser?userId=" + userId,
                  beforeSend: function (xhr) {
                     xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                  },
                  contentType: "application/json; charset=utf-8",
                  dataType: "json",
                  success: function (data) {
                     if (data.result == true) {
                        swal("Başarılı!", "Kullanıcı silme işlemi başarılı.", "success");
                        $silinecek.remove();
                Model    }
                     else {
                        swal("Hata oluştu!", data.message, "error");

                     }
                  },
                  error: function () {
                     swal("Hata!", "Post işleminde hata oluştu", "error");
                  }

               });


            } else {
               swal("İptal!", "Silme işleminden vazgeçildi", "error");
            }
         });
   });

   $(document).on("click", ".pasiveUserClass", function () {

      var $psfEl = $(this);
      var state = $psfEl.data("state");

      var userId = $(this).data("id");

      swal({
         title: "Dikkat!",
         text: "Kullanıcının durumunu değiştirmek istediğinize emin misiniz?",
         type: "warning",
         showCancelButton: true,
         confirmButtonClass: "btn-warning",
         confirmButtonText: "Evet",
         cancelButtonText: "İptal",
         closeOnConfirm: false,
         closeOnCancel: false
      },

         function (isConfirm) {
            if (isConfirm) {

               $.ajax({
                  type: "POST",
                  url: "/Manage/UsersChangeUserState?userId=" + userId + "&state=" + state,

                  contentType: "application/json; charset=utf-8",
                  dataType: "json",
                  success: function (data) {
                     if (data.result == true) {
                        swal("Başarılı!", data.message, "success");
                        setTimeout(function () { location.reload(); }, 1000);
                     }
                     else {
                        swal("Hata oluştu!", data.message, "error");

                     }
                  },
                  error: function () {
                     swal("Hata!", "Post işleminde hata oluştu", "error");
                  }
               });
            } else {
               swal("İptal!", "Silme işleminden vazgeçildi", "error");
            }
         });


   });

    $(".selectpicker").on("change", function () {

        var item = $("#userFirm").val();
        GetUsersForSelectedFirm(item);
    });

    $(".selectpicker").selectpicker();
   function GetFirms() {
        $.ajax({
            type: "POST",
            url: "/AgricultureWaterMeters/GetFirms",
            data: filtersData,
            async: false,
            success: function (res) {
                if (res.length > 0) {
                    var $selectFirm = $("#userFirm");
                    $selectFirm.empty(); // remove old options
                    //   $selectFirm.append($("<option></option>").attr("value", "-1").text("Tüm Firmalar"));

                    $.each(res, function (index, element) {
                        $selectFirm.append($("<option></option>").attr({ "value": element.FirmId, "data-reg": element.RegionId, "data-srg": element.SubregionId }).text(element.FirmName));
                    });
                    $selectFirm.selectpicker('refresh');
                } else {
                    filtersData.firmId = -1; // firmaya yada tüm sayaclara ait gateway verilerini görmek için
                    $("#userFirmDiv").hide();
                }
                if (res.length == 1)
                    $("#userFirmDiv").hide();
            },
            error: function (xhr, ajaxOptions, thrownError) {
                $.toast({
                    heading: 'GetFirms hata',
                    text: xhr.status,
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'danger',
                    hideAfter: 3500,
                    stack: 6
                });
            }
        });
    }

   function GetUsersForSelectedFirm(id)
    {
           $.ajax({
              url: "/Manage/UsersList?firmId=" + id,
              type: "POST",
              beforeSend: function (xhr) {
                 xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
             },
              contentType: "application/json; charset=utf-8",
              dataType: "json",
              success: function (result) {
                 dataTableObj.clear();
                 dataTableObj.rows.add(result).draw();
              },
              error: function(xhr, status, error){
                 var errorMessage = xhr.status + ': ' + xhr.statusText
                 alert('Error - ' + errorMessage);
              }
           });
    }
    </script>
}
